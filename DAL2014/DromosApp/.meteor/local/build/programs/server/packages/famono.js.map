{"version":3,"file":"/packages/famono.js","sources":["famono/requirejs_server.js","famono/requirejs_libraries_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,uB;AACA,+D;AACA,C;;AAEA,sB;AACA,8D;AACA,E;;;;;;;;;;;;;;;;;;ACNA,2B;AACA,+B;AACA,+B;AACA,yC;;AAEA,6C;AACA,gF;;AAEA,+E;;AAEA,yD;;AAEA,W;AACA,kB;;AAEA,mC;AACA,sC;AACA,8E;AACA,Q;AACA,sC;;AAEA,O;AACA,yF;AACA,iB;AACA,kF;AACA,G;;AAEA,0B;AACA,S;AACA,gG;AACA,mB;AACA,6E;AACA,K;AACA,G;;AAEA,C;;AAEA,4B;AACA,kC;AACA,kC;AACA,sC;AACA,sB;;AAEA,S;AACA,E;;AAEA,kC;AACA,4B;AACA,6B;AACA,4B;AACA,iB;AACA,E;;AAEA,gC;AACA,wB;AACA,sC;AACA,sB;AACA,wB;AACA,4B;AACA,8D;AACA,oB;AACA,U;AACA,e;AACA,Y;AACA,I;AACA,E;;;AAGA,qD;AACA,+D;AACA,iC;AACA,kB;AACA,kB;AACA,yB;AACA,oD;AACA,gF;AACA,Y;AACA,0B;AACA,4C;AACA,yB;AACA,oC;AACA,6B;AACA,0B;AACA,0B;AACA,wB;;AAEA,gC;AACA,0C;AACA,yC;AACA,sB;AACA,gD;AACA,yC;AACA,2B;AACA,6C;AACA,6B;AACA,S;;AAEA,4C;AACA,8B;AACA,+D;AACA,qD;AACA,yB;AACA,0B;AACA,+B;AACA,Y;AACA,kE;AACA,Y;AACA,kC;AACA,Y;AACA,iC;AACA,2B;AACA,0B;AACA,0B;AACA,0G;AACA,c;AACA,Y;AACA,sE;;AAEA,+C;AACA,2E;;AAEA,8E;AACA,4C;;AAEA,2B;AACA,6B;AACA,6B;AACA,wC;AACA,+F;AACA,iC;AACA,wB;AACA,c;AACA,yC;AACA,4D;AACA,iC;AACA,wB;AACA,c;AACA,uB;;AAEA,gB;AACA,sB;AACA,6B;;AAEA,oB;AACA,oC;AACA,yF;;AAEA,sB;AACA,uC;AACA,wG;AACA,kB;AACA,0D;AACA,0E;AACA,W;AACA,S;;AAEA,c;AACA,oB;AACA,2B;AACA,sD;AACA,yE;AACA,O;AACA,K;;AAEA,U;AACA,sC;AACA,kB;AACA,G;;;AAGA,G","sourcesContent":["require = function () {\n  throw new Error('Famous \"require\" cannot run on the server');\n}\n\ndefine = function () {\n  throw new Error('Famous \"define\" cannot run on the server');\n};","var fs = Npm.require('fs');\nvar path = Npm.require('path');\nvar send = Npm.require('send');\nvar useragent = Npm.require('useragent');\n\n// Set the main famono folder for our work...\nvar famonoRepoFolder = path.resolve(process.cwd(), '../../../../.famono-repos');\n\nvar famonoBaseFolder = path.resolve(process.cwd(), '../../../../.famono-base');\n\nvar famonoLibFolder = path.join(famonoBaseFolder, 'lib');\n\nvar config;\nvar registry = {};\n\n// Make sure famonoLibFolder exists\nif (!fs.existsSync(famonoLibFolder)) {\n  console.log('Famono: Error lib folder not found \"' + famonoLibFolder + '\"');\n} else {\n  // Load config and registry into mem\n\n  try {\n    config = JSON.parse(fs.readFileSync(path.join(famonoBaseFolder, '.config'), 'utf8'));\n  } catch (err) {\n    throw new Error('Famono: Error could not parse .config json, ' + err.message);\n  }\n\n  for (var ns in config) {\n    try {\n      registry[ns] = JSON.parse(fs.readFileSync(path.join(famonoRepoFolder, '.' + ns), 'utf8'));\n    } catch (err) {\n      console.log('Famono: Error namespace config load failed \"' + ns + '\"');\n    }\n  }\n\n}\n\nvar getExt = function(url) {\n  var last = url.split('.').pop();\n  // Only allow certain filetypes?\n  if (last === 'js' || last === 'css')\n    return '.' + last;\n\n  return;\n};\n\nvar getNamespace = function(url) {\n  var list = url.split('/');\n  // '' lib namespace foo bar\n  //  0  1      2      3   4\n  return list[2];\n};\n\nvar getLibrary = function(url) {\n  // Remove the lib part\n  var name = url.replace('/lib/', '');\n  // Get the extension\n  var ext = getExt(url);\n  // Remove the ext if found\n  if (ext) name = name.substring(0, name.length - ext.length);\n  // Return the name\n  return {\n    name: name,\n    ext: ext\n  };\n};\n\n\nWebApp.connectHandlers.use(function(req, res, next) {\n  // Check if the user requested something in the /lib/ folder \n  if (/^\\/lib\\//.test(req.url)) {\n    if (!config) {\n      // Set error\n      res.writeHead(500);\n      // If no config loaded then report as an error\n      res.end('Famono: Error registry not found in \"' + famonoRepoFolder + '\"');\n    } else {\n      // Get the namespace\n      var namespace = getNamespace(req.url);\n      // Get the lib info\n      var lib = getLibrary(req.url);\n      // Get the library name\n      var name = lib.name;\n      // Get the extension\n      var ext = lib.ext;\n\n      // console.log(namespace);\n      var currentNS = registry[namespace];\n      // Check that we have the namespace\n      if (currentNS) {\n        // Check if we need to add index or name\n        if (currentNS[name + '/index']) {\n          name += '/index';\n        } if (currentNS[name + '/' + name]) {\n          name += '/' + name;\n        }\n\n        // Check that we have the dependency\n        if (currentNS[name]) {\n          // XXX: If we want to add client specific compilation\n          // We should have some conversion table eg.\n          // Chrome -> CH\n          // FireFox -> FF\n          // IE, SAF, OP etc. ?\n          //\n          // Then have feature detection as a set of UA conditions\n          //\n          // The userAgent format:\n          //\n          // { family: 'Firefox',\n          //   major: '28',\n          //   minor: '0',\n          //   patch: '0',\n          //   source: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:28.0) Gecko/20100101 Firefox/28.0'\n          // }\n          //\n          var userAgent = useragent.lookup(req.headers['user-agent']);\n\n          // Get the filename of the dependency\n          var filename = path.join(famonoLibFolder, name + (ext || '.js'));\n\n          // XXX: We could compile any UA / Feature compiler conditions before\n          // sending the file to the client?\n\n          // Serve the file\n          send(req, filename)\n            //.maxage(maxAge)\n            .on('error', function(err) {\n              Log.error('Error serving library \"' + name + '\", file: ' + filename + ' ' + err);\n              res.writeHead(500);\n              res.end();\n            })\n            .on('directory', function() {\n              Log.error(\"Unexpected directory \" + filename);\n              res.writeHead(500);\n              res.end();\n            })\n            .pipe(res);\n\n        } else {\n          // Set error\n          res.writeHead(404);\n\n          var found;\n          for (var key in currentNS)\n            if (name.toLowerCase() == key.toLowerCase()) found = { key: key, name: name};\n\n          if (found) {\n            // Show nicer error message\n            res.end('Famono: Error, did you mean \"' + found.key + '\" instead of \"' + found.name + '\"?');\n          } else {\n            // If no config loaded then report as an error\n            res.end('Famono: Error, library not found in \"' + name + '\"');\n          }\n        }\n\n      } else {\n        // Set error\n        res.writeHead(400);\n        // If no config loaded then report as an error\n        res.end('Famono: Error namespace not found \"' + namespace + '\"');\n      }\n    }\n\n  } else {\n    // Pass on other urls than `/lib/`\n    return next();\n  }\n\n\n});"]}