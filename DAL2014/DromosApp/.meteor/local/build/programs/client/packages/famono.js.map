)]}'
{"version":3,"file":"/packages/famono.js","sources":["famono/requirejs_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sE;AACA,iB;;AAEA,4C;AACA,a;;AAEA,2C;AACA,uE;AACA,+E;AACA,4F;;AAEA,U;AACA,c;AACA,G;AACA,E;;AAEA,G;AACA,mB;AACA,sC;AACA,+B;AACA,6D;AACA,yE;AACA,G;AACA,0B;AACA,mB;AACA,+B;AACA,oC;AACA,+B;;AAEA,oC;AACA,yC;AACA,sE;AACA,kE;AACA,4B;AACA,Y;;AAEA,wE;AACA,oC;;AAEA,qC;AACA,6B;;AAEA,0B;AACA,sB;;AAEA,+C;AACA,4B;;AAEA,K;;AAEA,U;AACA,gC;AACA,kE;AACA,G;;AAEA,E;;AAEA,G;AACA,sB;AACA,8C;AACA,gD;AACA,yC;AACA,G;AACA,mD;AACA,gC;AACA,2D;;AAEA,0B;AACA,gD;;AAEA,yB;AACA,8B;AACA,gC;AACA,I;;AAEA,2B;AACA,kC;AACA,+B;AACA,I;;AAEA,uB;AACA,kC;;AAEA,sB;AACA,qC;;AAEA,0B;AACA,2B;AACA,E;;AAEA,G;AACA,+B;AACA,sC;AACA,gE;AACA,wC;AACA,G;AACA,8C;AACA,kC;AACA,8B;AACA,mF;AACA,mB;AACA,+B;AACA,8B;AACA,+B;AACA,4B;AACA,Q;AACA,U;AACA,uB;AACA,6B;AACA,qB;AACA,iC;AACA,qC;AACA,4B;AACA,0D;AACA,uC;AACA,kB;AACA,8B;AACA,8E;AACA,qB;AACA,+B;AACA,S;AACA,4E;AACA,S;AACA,K;AACA,G;AACA,E;;AAEA,G;AACA,2B;AACA,iD;AACA,0C;AACA,yC;AACA,G;AACA,0C;AACA,a;AACA,iC;AACA,sB;AACA,yB;AACA,2B;AACA,iB;AACA,8B;AACA,qC;AACA,0C;AACA,yC;AACA,K;AACA,G;AACA,E;;AAEA,G;AACA,wB;AACA,mD;AACA,0E;AACA,gF;AACA,G;AACA,8C;AACA,uB;AACA,kC;AACA,sB;AACA,c;AACA,oB;AACA,2C;AACA,iD;AACA,gD;AACA,sD;AACA,S;;AAEA,K;AACA,U;AACA,2D;AACA,+B;AACA,G;AACA,E;;AAEA,G;AACA,sB;AACA,mD;AACA,mE;AACA,yD;AACA,G;AACA,iC;AACA,uC;AACA,uB;AACA,8B;AACA,yD;AACA,uC;AACA,wC;AACA,qD;AACA,wD;AACA,sC;AACA,+D;AACA,oB;AACA,2B;AACA,wE;AACA,e;AACA,wB;AACA,K;AACA,E;;AAEA,G;AACA,wB;AACA,sC;AACA,mD;AACA,iC;AACA,G;AACA,yC;AACA,e;AACA,qC;AACA,uB;AACA,8B;AACA,yE;;AAEA,kB;AACA,6B;AACA,sE;;AAEA,qC;AACA,sC;AACA,iC;AACA,kB;AACA,iC;AACA,2D;AACA,K;AACA,C;;AAEA,G;AACA,wB;AACA,sC;AACA,mD;AACA,iC;AACA,G;AACA,6B;AACA,6B;AACA,sB;AACA,E;;AAEA,G;AACA,iB;AACA,wC;AACA,mD;AACA,iC;AACA,E;AACA,gE;AACA,G;AACA,mD;AACA,+B;AACA,6B;AACA,gD;;AAEA,iD;AACA,sC;AACA,6B;AACA,8C;;AAEA,yD;AACA,qC;AACA,+B;AACA,gD;;AAEA,wB;AACA,U;AACA,8D;AACA,G;AACA,E","sourcesContent":["// The library contains all the dependencies, they are not initialized\nvar modules = {};\n\nvar getModule = function(name, isDefining) {\n  if (name) {\n\n    var last = '/' + name.split('/').pop();\n    // We either return the module or init an empty module for tracking\n    return modules[name] || modules[name + '/index'] || modules[name + last] ||\n      (modules[name] = { exports: {}, callbacks: [], loaded: (isDefining) ? false : null });\n\n  } else {\n    return {};\n  }\n};\n\n/**\n * @method _require\n * @param {String} name Name of module\n * @returns {Any} Exported data\n * This function expects that any dependencies are all loaded\n * This function will return the module instance or initialize the module\n */\nrequire = function(name) {\n  // Get the module\n  var module = getModule(name);\n  // Check that the module is loaded\n  if (module.loaded === true) {\n\n    // Check if the library is found\n    if (typeof module.f !== 'function') {\n      // If we are loaded and we dont have a function then return then\n      // assume that we are already initialized and return exports\n      return module.exports;\n    } else {\n\n      // This is the current format Famo.us uses / requireJs or commonJS\n      module.f(require, {}, module);\n\n      // Set the now required library\n      modules[name] = module;\n\n      // Clean up, help GC\n      module.f = null;\n\n      // We return the things we want to export\n      return module.exports;\n\n    }\n\n  } else {\n    // The module is not defined\n    throw new Error('Famono: library \"' + name + '\" not defined');\n  }\n\n};\n\n/**\n * @method _loadScript\n * @param {String} libraryName Library to load\n * @param {Function} callback (err, libraryName)\n * This method loads javascript libraries\n */\nvar _loadScript = function(libraryName, callback) {\n  // Get pointer to the head tag\n  var head = document.getElementsByTagName('head').item(0);\n\n  // Create script element\n  var script = document.createElement('script');\n\n  // Set the onload event\n  script.onload = function() {\n    callback(null, libraryName);\n  };\n\n  // Set the on error event\n  script.onerror = function(err) {\n    callback(err, libraryName);\n  };\n\n  // Set the type to js\n  script.type = 'text/javascript';\n\n  // Set src to module\n  script.src = '/lib/' + libraryName;\n\n  // Inject the script tag\n  head.appendChild(script);\n};\n\n/**\n * @method loadModuleDefinition\n * @param {String} name module to load\n * @param {Function} callback() is called when module is defined\n * This function load module definitions\n */\nvar loadModuleDefinition = function(name, f) {\n  // Make sure the callback is set\n  if (typeof f !== 'function')\n    throw new Error('Famono: loadModuleDefinition require a callback as function');\n  // Get the module\n  var module = getModule(name);\n  // Check if module is loaded\n  if (module.loaded === true) {\n    // We callback instantly\n    f();\n  } else {\n    // Add the function\n    module.callbacks.push(f);\n    // load module...\n    if (module.loaded === null) {\n      // Set the module to be loading\n      module.loaded = false;\n      // We are not loading the module so we start loading\n      _loadScript(name, function(err) {\n        if (err) {\n          // On error we reset\n          // XXX: should we start a retry algorithm? eg. 5 attepmts then final\n          // failure?\n          module.loaded = null;\n        }\n        // We dont have to do anything else - the module will trigger loaded\n      });\n    }\n  }\n};\n\n/**\n * @method moduleDefineDone\n * @param {String} name module to mark as defined\n * @param {Function} f The module function\n * This function marks modules as defined\n */\nvar moduleDefineDone = function(name, f) {\n  if (name) {\n    var module = getModule(name);\n    // Set loaded flag\n    module.loaded = true;\n    // Register the library\n    module.f = f;\n    // Call back all listeners\n    while (module.callbacks.length) {\n      // We pop out the listener callbacks\n      module.callbacks.pop()(null, name);\n    }\n  }\n};\n\n/**\n * @method loadLibraries\n * @param {Array} deps List of dependencies to load\n * @param {Function} callback This function is called when deps are loaded\n * This function makes sure only to run callback when all dependecies are loaded\n */\nvar loadLibraries = function(deps, callback) {\n  // Expected callbacks\n  var count = deps && deps.length;\n  // Load dependencies\n  if (count) {\n    // Load each dep\n    for (var i = 0; i < deps.length; i++) {\n      // We wait until the submodules have loaded\n      loadModuleDefinition(deps[i], function() {\n        if (--count === 0) callback(moduleDefineDone);\n      });\n\n    }\n  } else {\n    // Call back instantly if we dont have any dependencies\n    callback(moduleDefineDone);\n  }\n};\n\n/**\n * @method _loadModule\n * @param {Array} deps List of dependencies to load\n * @param {Function} f This function is called when deps are loaded\n * Dependencies are passed on to function f as parametres\n */\n_loadModule = function(deps, f) {\n  //throw new Error('Not implemented');\n  // Check for function\n  if (typeof f !== 'function')\n    throw new Error('Famono: define require a function');\n  // Convert strings to array of string\n  if (deps === '' + deps) deps = [deps];\n  // XXX: deps can be a string or an array of strings\n  // 1. ensure all deps are loaded by checking modules[]\n  loadLibraries(deps, function(done) {\n    // 2. ensure all deps are initialized by checking modules[]\n    var result = [];\n    // Init the dependecies\n    for (var i = 0; i < deps.length; i++) result.push(require(deps[i]));\n    // 3. run f\n    f.apply({}, result);\n  });\n};\n\n/**\n * @method _defineModule\n * @param {String} name Name of module\n * @param {Array} deps List of dependencies to load\n * @param {Function} f The module\n */\n_defineModule = function(name, deps, f) {\n  // Get module\n  var module = getModule(name, true);\n  // Check for function\n  if (typeof f !== 'function')\n    throw new Error('Famono: library \"' + name + '\" require a function');\n\n  // Check library\n  if (module.loaded === true)\n    throw new Error('Famono: library \"' + name + '\" already defined');\n\n  // 1. Make sure the deps are loaded\n  loadLibraries(deps, function(done) {\n    // Mark this module as loaded\n    done(name, f);\n    // Check if this is a global?\n    if (name === null) f(require, {}, { exports: window });\n  });\n}\n\n/**\n * @method _defineGlobal\n * @param {String} name Name of module\n * @param {Array} deps List of dependencies to load\n * @param {Function} f The module\n */\n_defineGlobal = function(f) {\n  // Define a global thing...\n  define(null, [], f);\n};\n\n/**\n * @method define\n * @param {String} [name] Name of module\n * @param {Array} deps List of dependencies to load\n * @param {Function} f The module\n *\n * > If no name is passed then deps are passed to f as arguments\n */\ndefine = function(/* name, deps, f or deps, f */) {\n  if (arguments.length === 1) {\n    // Return the load module\n    return _defineGlobal.apply(this, arguments);\n\n    // define([deps, ... , deps], function() {});\n  } else if (arguments.length === 2) {\n    // Return the load module\n    return _loadModule.apply(this, arguments);\n\n    // define('name', [deps, ... , deps], function() {});\n  } else if (arguments.length == 3) {\n    // Return the define module\n    return _defineModule.apply(this, arguments);\n\n    // Invalid arguments\n  } else {\n    throw new Error('define got invalid number of arguments');\n  }\n};"]}