)]}'
{"version":3,"file":"/packages/foursquare.js","sources":["foursquare/foursquare_configure.html","foursquare/foursquare_configure.js","foursquare/foursquare_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6E;AACA,kB;AACA,sB;AACA,uW;AACA,kB;AACA,iB;AACA,sD;AACA,kF;AACA,kB;AACA,iB;AACA,sD;AACA,sD;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,yE;AACA,8B;AACA,E;;AAEA,wE;AACA,U;AACA,+C;AACA,gD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACTA,gB;;AAEA,8C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,sF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,oF;AACA,gB;AACA,2I;AACA,W;AACA,G;AACA,oC;;AAEA,gB;AACA,sD;AACA,yC;AACA,+B;AACA,0E;AACA,oC;;AAEA,mF;AACA,2D;AACA,E","sourcesContent":["\nTemplate.__define__(\"configureLoginServiceDialogForFoursquare\", (function() {\n  var self = this;\n  var template = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Foursquare Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(HTML.Raw('\\n    <li>\\n      Visit <a href=\"https://foursquare.com/developers/register\" target=\"blank\">https://foursquare.com/developers/register</a>\\n    </li>\\n    '), HTML.LI(\"\\n      Set Download / welcome page url to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"siteUrl\"));\n  }), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Redirect URI(s) to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"siteUrl\"));\n  }, \"_oauth/foursquare?close\"), \"\\n    \"), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForFoursquare.siteUrl = function () {\n  return Meteor.absoluteUrl();\n};\n\nTemplate.configureLoginServiceDialogForFoursquare.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client Secret'}\n  ];\n};\n","Foursquare = {};\n\n// Request Foursquare credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nFoursquare.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'foursquare'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\n    return;\n  }\n  var credentialToken = Random.id();\n\n  var loginUrl =\n        'https://foursquare.com/oauth2/authenticate' +\n        '?client_id=' + config.clientId +\n        '&response_type=code' +\n        '&redirect_uri=' + Meteor.absoluteUrl('_oauth/foursquare?close') +\n        '&state=' + credentialToken;\n\n  Oauth.initiateLogin(credentialToken, loginUrl, credentialRequestCompleteCallback,\n                                {width: 900, height: 450});\n};\n"]}